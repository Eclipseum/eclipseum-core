digraph "" {
Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    toPayable(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

DAI -> ERC20 [ label="1" ];
DAI -> ERC20Detailed [ label="2" ];
DAI[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DAI</B></TD></TR><TR><TD><BR/></TD></TR><TR><TD align="left" border="1"><font color="#777777" point-size="10">'totalSupply()' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'balanceOf(address)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'transfer(address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'allowance(address,address)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'approve(address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'transferFrom(address,address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.</font></TD></TR></TABLE> >];

Eclipseum -> ERC20 [ label="1" ];
Eclipseum -> ERC20Detailed [ label="2" ];
Eclipseum -> ReentrancyGuard [ label="3" ];
Eclipseum[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Eclipseum</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    launch()</TD></TR><TR><TD align="left">    buyEcl(uint256,uint256)</TD></TR><TR><TD align="left">    sellEcl(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    softSellEcl(uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    buyDai(uint256,uint256)</TD></TR><TR><TD align="left">    sellDai(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    calcBOut(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    calcEthTransferForBuyEcl(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    applyTransactionFee(uint256)</TD></TR><TR><TD align="left">    eclBalanceOfEclPool()</TD></TR><TR><TD align="left">    ethBalanceOfDaiPool()</TD></TR><TR><TD align="left">    daiBalanceOfDaiPool()</TD></TR><TR><TD align="left">    circulatingSupply()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    requireLaunched()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    daiInterface<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    launched</TD></TR><TR><TD align="left">    ethBalanceOfEclPool</TD></TR><TR><TD align="left">    ethVolumeOfEclPool</TD></TR><TR><TD align="left">    ethVolumeOfDaiPool</TD></TR><TR><TD><BR/></TD></TR><TR><TD align="left" border="1"><font color="#777777" point-size="10">'totalSupply()' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'balanceOf(address)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'transfer(address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'allowance(address,address)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'approve(address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.<BR/>'transferFrom(address,address,uint256)' collides in inherited contracts IERC20, ERC20 where ERC20 is chosen.</font></TD></TR></TABLE> >];

ERC20 -> Context [ label="1" ];
ERC20 -> IERC20 [ label="2" ];
ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _burnFrom(address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR></TABLE> >];

ERC20Detailed -> IERC20;
ERC20Detailed[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Detailed</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left">    _decimals</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

Migrations[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Migrations</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setCompleted(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    restricted()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    owner</TD></TR><TR><TD align="left">    last_completed_migration</TD></TR></TABLE> >];

ReentrancyGuard[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _notEntered</TD></TR></TABLE> >];

SafeMath[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256,string)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256,string)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256,string)</TD></TR></TABLE> >];

}